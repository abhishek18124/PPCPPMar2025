/*

Given a string of length n, generate all of its subsequences.

A subsequence of a given string (sequence) is a string (sequence) that is generated by
removing zero or more characters from the given string (sequence) without changing its
order.

Example

	Input : inp[] = "abc"
	Output: ["", "c", "b", "bc", "a", "ac", "ab", "abc"]

Constraints

  1 < n < 10

*/

#include<iostream>
#include<set>

using namespace std;

void f(char inp[], char out[], int i, int j, set<string>& s) {

	// base case

	if (inp[i] == '\0') { // i == n
		out[j] = '\0';
		// cout << out << endl;
		string outStr(out); // we are init a string obj using a char array
		s.insert(outStr);
		// s.insert(string(out));
		return;
	}

	// recursive case

	// f(i, j) = it is a fn that takes decisions for
	// inp[i...n-1] s.t. the next free index in the out[]
	// is index j

	// or

	// f(i, j) = it is a fn that generates subsequences for
	// inp[i...n-1] s.t. the next free index in the out[]
	// is index j

	// decide for inp[i]

	// option 1 : include inp[i] to the out[]

	out[j] = inp[i];
	f(inp, out, i + 1, j + 1, s);

	// option 2 : exclude inp[i] from the out[]

	f(inp, out, i + 1, j, s);

}

int main() {

	char inp[] = "abc";
	char out[10]; // based on constraints

	set<string> s;

	f(inp, out, 0, 0, s);

	for (string subseq : s) {
		cout << subseq << endl;
	}

	cout << endl;

	return 0;
}
